image: openjdk:17-jdk

stages:
  - security
  - build
  - test
  - quality
  - package
  - deploy
  - notify

variables:
  GRADLE_OPTS: "-Dorg.gradle.daemon=false -Dorg.gradle.workers.max=2"
  GRADLE_USER_HOME: "$CI_PROJECT_DIR/.gradle"
  JAVA_VERSION: "17"
  NODE_VERSION: "18"
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: "/certs"

# Global cache configuration
cache:
  key: "${CI_COMMIT_REF_SLUG}"
  paths:
    - .gradle/wrapper
    - .gradle/caches
    - tools/web-host/node_modules/
    - tools/editor/web/node_modules/

# Default before script
before_script:
  - chmod +x ./gradlew
  - export GRADLE_USER_HOME="$CI_PROJECT_DIR/.gradle"

# ==========================================
# SECURITY STAGE
# ==========================================

security-scan:
  stage: security
  allow_failure: true
  script:
    - ./gradlew dependencyCheckAnalyze
    - ./gradlew detekt
  artifacts:
    reports:
      dependency_scanning: build/reports/dependency-check-report.json
      sast: build/reports/detekt/detekt.sarif
    paths:
      - build/reports/dependency-check-report.html
      - build/reports/detekt/
    expire_in: 1 week

secret-scan:
  stage: security
  image: registry.gitlab.com/gitlab-org/security-products/analyzers/secrets:latest
  script:
    - /analyzer run
  artifacts:
    reports:
      secret_detection: gl-secret-detection-report.json
  allow_failure: true

# ==========================================
# BUILD STAGE
# ==========================================

build-core:
  stage: build
  script:
    - ./gradlew assemble -x test
  artifacts:
    paths:
      - build/libs/
      - tools/*/build/libs/
    expire_in: 2 hours
  cache:
    policy: pull-push

build-tools:
  stage: build
  needs: []
  parallel:
    matrix:
      - TOOL: ["editor", "profiler", "docs", "api-server"]
  script:
    - ./gradlew :tools:${TOOL}:assemble -x test
  artifacts:
    paths:
      - tools/${TOOL}/build/
    expire_in: 2 hours
  cache:
    policy: pull

build-web-tools:
  stage: build
  image: node:${NODE_VERSION}
  needs: []
  before_script:
    - cd tools/web-host
    - npm ci
  script:
    - npm run build
    - cd ../editor/web
    - npm ci
    - npm run build
  artifacts:
    paths:
      - tools/web-host/dist/
      - tools/editor/web/dist/
    expire_in: 2 hours
  cache:
    key: "node-${CI_COMMIT_REF_SLUG}"
    paths:
      - tools/web-host/node_modules/
      - tools/editor/web/node_modules/
    policy: pull-push

build-api-server:
  stage: build
  needs: []
  script:
    - ./gradlew :tools:api-server:shadowJar
  artifacts:
    paths:
      - tools/api-server/build/libs/*-all.jar
    expire_in: 2 hours

# ==========================================
# TEST STAGE
# ==========================================

test-contract:
  stage: test
  needs: ["build-core"]
  script:
    - ./gradlew test --tests "*contract*"
  artifacts:
    reports:
      junit: build/test-results/test/TEST-*.xml
    paths:
      - build/reports/tests/
    expire_in: 1 week

test-multiplatform:
  stage: test
  needs: ["build-core"]
  parallel:
    matrix:
      - PLATFORM: ["jvm", "js"]
  before_script:
    - |
      if [ "$PLATFORM" = "js" ]; then
        apt-get update -qq && apt-get install -y -qq curl
        curl -sL https://deb.nodesource.com/setup_${NODE_VERSION}.x | bash -
        apt-get install -y nodejs
      fi
    - chmod +x ./gradlew
  script:
    - ./gradlew ${PLATFORM}Test
  artifacts:
    reports:
      junit: build/test-results/${PLATFORM}Test/TEST-*.xml
    paths:
      - build/reports/tests/
    expire_in: 1 week

test-tools:
  stage: test
  needs: ["build-tools"]
  parallel:
    matrix:
      - TOOL: ["editor", "profiler", "docs", "api-server"]
  script:
    - ./gradlew :tools:${TOOL}:test
  artifacts:
    reports:
      junit: tools/${TOOL}/build/test-results/test/TEST-*.xml
    paths:
      - tools/${TOOL}/build/reports/tests/
    expire_in: 1 week

test-integration:
  stage: test
  needs: ["build-core", "build-tools"]
  script:
    - ./gradlew integrationTest
  artifacts:
    reports:
      junit: build/test-results/integrationTest/TEST-*.xml
    paths:
      - build/reports/tests/integrationTest/
    expire_in: 1 week

test-visual:
  stage: test
  needs: ["build-tools"]
  before_script:
    - apt-get update -qq && apt-get install -y -qq xvfb libxrandr2 libxss1 libxcursor1 libxcomposite1 libasound2 libxi6 libxtst6
    - chmod +x ./gradlew
  script:
    - export DISPLAY=:99
    - Xvfb :99 -screen 0 1920x1080x24 > /dev/null 2>&1 &
    - sleep 3
    - ./gradlew visualTest
  artifacts:
    paths:
      - build/reports/visual-tests/
    expire_in: 1 week
  allow_failure: true

test-performance:
  stage: test
  needs: ["build-core", "build-tools"]
  script:
    - ./gradlew performanceTest
  artifacts:
    paths:
      - build/reports/performance/
    expire_in: 1 week

test-web-tools:
  stage: test
  image: node:${NODE_VERSION}
  needs: ["build-web-tools"]
  before_script:
    - cd tools/web-host
  script:
    - npm test
    - cd ../editor/web
    - npm test
  artifacts:
    reports:
      junit: tools/*/web/test-results.xml
    paths:
      - tools/*/web/coverage/
    expire_in: 1 week

test-api-integration:
  stage: test
  needs: ["build-api-server", "build-web-tools"]
  services:
    - name: postgres:13
      alias: postgres
  variables:
    POSTGRES_DB: test_db
    POSTGRES_USER: test_user
    POSTGRES_PASSWORD: test_password
  before_script:
    - chmod +x ./gradlew
    - apt-get update -qq && apt-get install -y -qq curl
    - curl -sL https://deb.nodesource.com/setup_${NODE_VERSION}.x | bash -
    - apt-get install -y nodejs
  script:
    # Start API server in background
    - java -jar tools/api-server/build/libs/*-all.jar &
    - API_PID=$!
    - sleep 15
    # Run integration tests
    - cd tools/web-host
    - npm ci
    - npm run test:integration
    # Stop API server
    - kill $API_PID || true
  artifacts:
    paths:
      - tools/web-host/test-results/
    expire_in: 1 week

# ==========================================
# QUALITY STAGE
# ==========================================

code-coverage:
  stage: quality
  needs:
    - test-contract
    - test-multiplatform
    - test-tools
    - test-integration
  script:
    - ./gradlew koverXmlReport koverHtmlReport
  coverage: '/Line Coverage: (\d+\.\d+)%/'
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: build/reports/kover/report.xml
    paths:
      - build/reports/kover/
    expire_in: 1 month

code-quality:
  stage: quality
  needs: []
  script:
    - ./gradlew detekt ktlintCheck
  artifacts:
    reports:
      codequality: build/reports/detekt/detekt.json
    paths:
      - build/reports/detekt/
      - build/reports/ktlint/
    expire_in: 1 month

performance-analysis:
  stage: quality
  needs: ["test-performance"]
  script:
    - ./gradlew performanceRegressionCheck
  artifacts:
    paths:
      - build/reports/performance-analysis/
    expire_in: 1 month
  allow_failure: true

# ==========================================
# PACKAGE STAGE
# ==========================================

package-desktop-linux:
  stage: package
  needs: ["test-tools"]
  only:
    - main
    - tags
  before_script:
    - chmod +x ./gradlew
    - chmod +x tools/packaging/linux/package.sh
  script:
    - cd tools/packaging/linux && ./package.sh
  artifacts:
    paths:
      - tools/packaging/linux/dist/
    expire_in: 1 month

package-documentation:
  stage: package
  needs: ["build-tools"]
  script:
    - ./gradlew dokkaHtml
    - ./gradlew :tools:docs:generateDocs
  artifacts:
    paths:
      - build/dokka/html/
      - tools/docs/build/generated/
    expire_in: 1 month

package-docker-images:
  stage: package
  image: docker:latest
  services:
    - docker:dind
  needs: ["build-api-server", "build-web-tools"]
  only:
    - main
    - tags
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker build -t $CI_REGISTRY_IMAGE/api-server:$CI_COMMIT_SHA -f tools/api-server/Dockerfile .
    - docker build -t $CI_REGISTRY_IMAGE/web-tools:$CI_COMMIT_SHA -f tools/web-host/Dockerfile .
    - docker push $CI_REGISTRY_IMAGE/api-server:$CI_COMMIT_SHA
    - docker push $CI_REGISTRY_IMAGE/web-tools:$CI_COMMIT_SHA
    - |
      if [ "$CI_COMMIT_REF_NAME" = "main" ]; then
        docker tag $CI_REGISTRY_IMAGE/api-server:$CI_COMMIT_SHA $CI_REGISTRY_IMAGE/api-server:latest
        docker tag $CI_REGISTRY_IMAGE/web-tools:$CI_COMMIT_SHA $CI_REGISTRY_IMAGE/web-tools:latest
        docker push $CI_REGISTRY_IMAGE/api-server:latest
        docker push $CI_REGISTRY_IMAGE/web-tools:latest
      fi

# ==========================================
# DEPLOY STAGE
# ==========================================

deploy-staging:
  stage: deploy
  environment:
    name: staging
    url: https://staging.tools.kreekt.dev
  needs: ["package-docker-images", "build-web-tools"]
  only:
    - main
  script:
    - echo "Deploying to staging environment..."
    - echo "API Server: $CI_REGISTRY_IMAGE/api-server:$CI_COMMIT_SHA"
    - echo "Web Tools: $CI_REGISTRY_IMAGE/web-tools:$CI_COMMIT_SHA"
    # Add staging deployment commands here
  when: manual

deploy-production:
  stage: deploy
  environment:
    name: production
    url: https://tools.kreekt.dev
  needs: ["package-docker-images", "package-documentation"]
  only:
    - tags
  script:
    - echo "Deploying to production environment..."
    - echo "API Server: $CI_REGISTRY_IMAGE/api-server:$CI_COMMIT_TAG"
    - echo "Web Tools: $CI_REGISTRY_IMAGE/web-tools:$CI_COMMIT_TAG"
    # Add production deployment commands here
  when: manual

deploy-maven:
  stage: deploy
  needs: ["code-coverage", "code-quality"]
  only:
    - tags
  variables:
    MAVEN_OPTS: "-Dmaven.repo.local=$CI_PROJECT_DIR/.m2/repository"
  cache:
    paths:
      - .m2/repository/
  script:
    - ./gradlew publishToMavenCentral
  when: manual

deploy-npm:
  stage: deploy
  image: node:${NODE_VERSION}
  needs: ["test-web-tools"]
  only:
    - tags
  before_script:
    - cd tools/editor/web
    - npm ci
    - echo "//registry.npmjs.org/:_authToken=${NPM_TOKEN}" > .npmrc
  script:
    - npm publish --access public
  when: manual

deploy-documentation:
  stage: deploy
  image: alpine:latest
  needs: ["package-documentation"]
  only:
    - main
    - tags
  before_script:
    - apk add --no-cache curl rsync openssh-client
  script:
    - echo "Deploying documentation to CDN..."
    - rsync -avz --delete build/dokka/html/ $DOCS_DEPLOY_PATH
    - curl -X POST "$DOCS_WEBHOOK_URL" -H "Content-Type: application/json" -d '{"source":"gitlab","commit":"'$CI_COMMIT_SHA'"}'
  when: manual

# ==========================================
# NOTIFICATION STAGE
# ==========================================

notify-success:
  stage: notify
  image: alpine:latest
  needs:
    - test-contract
    - test-multiplatform
    - test-tools
    - test-integration
    - code-coverage
    - code-quality
  only:
    - main
    - tags
  before_script:
    - apk add --no-cache curl
  script:
    - |
      curl -X POST "$SLACK_WEBHOOK_URL" \
        -H 'Content-type: application/json' \
        --data '{
          "text": "✅ KreeKt Tools CI/CD Pipeline Completed Successfully",
          "blocks": [
            {
              "type": "section",
              "text": {
                "type": "mrkdwn",
                "text": "*KreeKt Tools Build Success* ✅\n*Branch:* '$CI_COMMIT_REF_NAME'\n*Commit:* '$CI_COMMIT_SHA'\n*Pipeline:* <'$CI_PIPELINE_URL'|#'$CI_PIPELINE_ID'>"
              }
            }
          ]
        }'
  when: on_success

notify-failure:
  stage: notify
  image: alpine:latest
  before_script:
    - apk add --no-cache curl
  script:
    - |
      curl -X POST "$SLACK_WEBHOOK_URL" \
        -H 'Content-type: application/json' \
        --data '{
          "text": "❌ KreeKt Tools CI/CD Pipeline Failed",
          "blocks": [
            {
              "type": "section",
              "text": {
                "type": "mrkdwn",
                "text": "*KreeKt Tools Build Failed* ❌\n*Branch:* '$CI_COMMIT_REF_NAME'\n*Commit:* '$CI_COMMIT_SHA'\n*Pipeline:* <'$CI_PIPELINE_URL'|#'$CI_PIPELINE_ID'>"
              }
            }
          ]
        }'
  when: on_failure

# ==========================================
# UTILITY JOBS
# ==========================================

cleanup-old-artifacts:
  stage: notify
  image: alpine:latest
  before_script:
    - apk add --no-cache curl jq
  script:
    - |
      # Delete artifacts older than 30 days
      CUTOFF_DATE=$(date -d '30 days ago' '+%Y-%m-%dT%H:%M:%S.%3NZ')

      curl --header "PRIVATE-TOKEN: $CI_API_TOKEN" \
           "$CI_API_V4_URL/projects/$CI_PROJECT_ID/jobs?per_page=100" \
      | jq --arg cutoff "$CUTOFF_DATE" '
        .[] | select(.created_at < $cutoff) | .id
      ' | while read job_id; do
        curl --request DELETE \
             --header "PRIVATE-TOKEN: $CI_API_TOKEN" \
             "$CI_API_V4_URL/projects/$CI_PROJECT_ID/jobs/$job_id/artifacts"
      done
  when: manual
  allow_failure: true
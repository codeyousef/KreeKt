openapi: 3.0.3
info:
  title: VoxelCraft Player API
  description: API contracts for player movement, camera, flight, and inventory
  version: 1.0.0

components:
  schemas:
    Vector3:
      type: object
      required: [ x, y, z ]
      properties:
        x: { type: number, format: float }
        y: { type: number, format: float }
        z: { type: number, format: float }

    Rotation:
      type: object
      required: [ pitch, yaw ]
      properties:
        pitch: { type: number, format: float, minimum: -1.5708, maximum: 1.5708, description: "Radians, clamped to ±π/2" }
        yaw: { type: number, format: float, description: "Radians, unclamped" }

    PlayerState:
      type: object
      required: [ position, rotation, isFlying, velocity ]
      properties:
        position: { $ref: '#/components/schemas/Vector3' }
        rotation: { $ref: '#/components/schemas/Rotation' }
        isFlying: { type: boolean }
        velocity: { $ref: '#/components/schemas/Vector3' }

    MoveRequest:
      type: object
      required: [ direction, deltaTime ]
      properties:
        direction: { $ref: '#/components/schemas/Vector3', description: "Normalized movement vector" }
        deltaTime: { type: number, format: float, minimum: 0, maximum: 0.1, description: "Frame time in seconds" }

    RotateRequest:
      type: object
      required: [ deltaPitch, deltaYaw ]
      properties:
        deltaPitch: { type: number, format: float }
        deltaYaw: { type: number, format: float }

    BlockType:
      type: string
      enum: [ GRASS, DIRT, STONE, WOOD, LEAVES, SAND, WATER ]

    Inventory:
      type: object
      properties:
        blocks:
          type: object
          additionalProperties:
            type: integer
            minimum: 0
          description: "Map of BlockType to count (unlimited capacity in creative mode)"
        selectedBlock: { $ref: '#/components/schemas/BlockType' }

    AddBlockRequest:
      type: object
      required: [ blockType, count ]
      properties:
        blockType: { $ref: '#/components/schemas/BlockType' }
        count: { type: integer, minimum: 1 }

paths:
  /player/state:
    get:
      summary: Get player state
      operationId: getPlayerState
      responses:
        '200':
          description: Player state retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlayerState'

  /player/move:
    put:
      summary: Update player position with collision detection
      operationId: movePlayer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MoveRequest'
      responses:
        '200':
          description: Player moved
          content:
            application/json:
              schema:
                type: object
                required: [ newPosition, collided ]
                properties:
                  newPosition: { $ref: '#/components/schemas/Vector3' }
                  collided: { type: boolean, description: "True if movement was blocked by solid block" }
        '400':
          description: Invalid movement vector

  /player/rotate:
    put:
      summary: Update camera rotation
      operationId: rotateCamera
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RotateRequest'
      responses:
        '200':
          description: Camera rotated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Rotation'

  /player/flight/toggle:
    post:
      summary: Toggle flight mode on/off
      operationId: toggleFlightMode
      responses:
        '200':
          description: Flight mode toggled
          content:
            application/json:
              schema:
                type: object
                required: [ isFlying ]
                properties:
                  isFlying: { type: boolean }

  /player/inventory:
    get:
      summary: Get inventory contents
      operationId: getInventory
      responses:
        '200':
          description: Inventory retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Inventory'

  /player/inventory/add:
    post:
      summary: Add blocks to inventory
      operationId: addToInventory
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddBlockRequest'
      responses:
        '200':
          description: Blocks added
          content:
            application/json:
              schema:
                type: object
                required: [ newCount ]
                properties:
                  newCount: { type: integer, minimum: 0 }
        '400':
          description: Invalid block type
